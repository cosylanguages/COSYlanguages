```diff
--- a/index.html
+++ b/index.html
@@ -6,12 +6,18 @@
     <link rel="stylesheet" href="src/css/main.css">
 </head>
 <body>
+    <script type="module">
+        // Ensure UserProgress is loaded on startup
+        import UserProgress from './src/js/user-progress.js';
+        document.addEventListener('DOMContentLoaded', () => {
+            UserProgress.load();
+        });
+    </script>
     <div class="container">
         <h1>COSYlanguages</h1>
-        
+        <div class="user-stats" style="text-align: center; margin-bottom: 15px; font-size: 0.9em; color: #333;">
+            <span id="xp-display" style="margin-right: 20px;">XP: 0</span>
+            <span id="level-display" style="margin-right: 20px;">Level: 1</span>
+            <span id="streak-display">Streak: 0</span>
+        </div>
         <div class="menu-section">
             <label for="language">üåé Choose Your Language:</label>
             <select id="language">
--- a/src/js/exercises/vocabulary.js
+++ b/src/js/exercises/vocabulary.js
@@ -1,3 +1,6 @@
+import UserProgress from '../user-progress.js';
+import AudioFeedback from '../audio-feedback.js';
+
 // Functions moved to utils.js: shuffleArray, showNoDataMessage, addRandomizeButton
 
 // Data loading functions
@@ -240,10 +243,14 @@
         const userAnswer = document.getElementById('opposite-input').value.trim();
         const feedback = document.getElementById('opposite-feedback');
         if (userAnswer.toLowerCase() === opposite.toLowerCase()) {
+            UserProgress.recordAnswer(true);
+            AudioFeedback.playSuccessSound();
             feedback.innerHTML = `<span class="correct" aria-label="Correct">‚úÖüëè ${t.correct || 'Correct!'}</span>`;
             document.getElementById('opposite-answer').textContent = opposite;
         } else {
+            UserProgress.recordAnswer(false);
+            AudioFeedback.playErrorSound();
             feedback.innerHTML = `<span class="incorrect" aria-label="Incorrect">‚ùåü§î ${t.feedbackNotQuiteTryAgain || 'Try again!'}</span>`;
         }
     });
--- a/src/js/user-progress.js
+++ b/src/js/user-progress.js
@@ -13,17 +13,41 @@
         if (saved) {
             this.data = JSON.parse(saved);
             if (!this.data.firstTimeTodayForDay1) {
                 this.data.firstTimeTodayForDay1 = {};
             }
+            // Ensure default values for new properties if loading old data
+            if (this.data.xp === undefined) this.data.xp = 0;
+            if (this.data.level === undefined) this.data.level = 1;
+            if (this.data.streak === undefined) this.data.streak = 0; // Ensure streak default
+        } else {
+            // If no saved data, initialize with defaults
+            this.data = {
+                xp: 0,
+                streak: 0,
+                lastActive: null,
+                completedLessons: [],
+                achievements: [],
+                level: 1,
+                firstTimeTodayForDay1: {}
+            };
         }
+        this.updateXPLevelDisplay(); // Call the update here
     },
     save() {
         localStorage.setItem('userProgress', JSON.stringify(this.data));
     },
+    updateXPLevelDisplay() {
+        const xpElement = document.getElementById('xp-display');
+        if (xpElement) {
+            xpElement.textContent = `XP: ${this.data.xp}`;
+        }
+        const levelElement = document.getElementById('level-display');
+        if (levelElement) {
+            levelElement.textContent = `Level: ${this.data.level}`;
+        }
+        const streakElement = document.getElementById('streak-display');
+        if (streakElement) {
+            streakElement.textContent = `Streak: ${this.data.streak}`;
+        }
+    },
     addXP(amount) {
         this.data.xp += amount;
+        if (this.data.xp < 0) this.data.xp = 0; // Prevent negative XP
         const newLevel = Math.floor(this.data.xp / 50) + 1;
         if (newLevel > this.data.level) {
             this.data.level = newLevel;
@@ -31,6 +55,7 @@
             if (typeof showToast === 'function') showToast('üèÖ Level Up!');
         }
         this.save();
+        this.updateXPLevelDisplay(); // Add this call
     },
     completeLesson(lessonId) {
         if (!this.data.completedLessons.includes(lessonId)) {
@@ -45,12 +70,28 @@
         if (this.data.lastActive !== today) {
             const yesterday = new Date(Date.now() - 86400000).toDateString();
             if (this.data.lastActive === yesterday) {
                 this.data.streak += 1;
             } else {
-                this.data.streak = 1;
+                this.data.streak = 1; // Reset to 1 if not consecutive, or 0 if preferred
             }
             this.data.lastActive = today;
+            this.addXP(10); // Award XP for maintaining a streak
             this.save();
+            this.updateXPLevelDisplay(); // Add this call
         }
+    },
+    recordAnswer(isCorrect) {
+        if (isCorrect) {
+            this.addXP(5); // Award 5 XP for a correct answer
+        } else {
+            this.addXP(-2); // Example: Deduct 2 XP for an incorrect answer
+            // xp minimum is handled by addXP now
+        }
+        // Note: save() and updateXPLevelDisplay() are called by addXP()
+        // If addXP didn't call them, they would be needed here:
+        // this.save();
+        // this.updateXPLevelDisplay();
     }
 };
 
 export default UserProgress;

```
