```diff
--- a/index.html
+++ b/index.html
@@ -14,6 +14,14 @@
         <div class="user-stats" style="text-align: center; margin-bottom: 15px; font-size: 0.9em; color: #333;">
             <span id="xp-display" style="margin-right: 20px;">XP: 0</span>
             <span id="level-display" style="margin-right: 20px;">Level: 1</span>
-            <span id="streak-display">Streak: 0</span>
+            <span id="streak-display" style="margin-right: 20px;">Streak: 0</span>
         </div>
-        <div class="menu-section">
+        <div id="main-menu"> <!-- Added a wrapper for main menu sections -->
+            <div class="menu-section">
             <label for="language">üåé Choose Your Language:</label>
             <select id="language">
                 <option value="">Your Language</option>
@@ -48,12 +56,13 @@
                     </select>
                 </div>
             </div>
-        </div>
-        
-        <div class="menu-section">
+            </div>
+        
+            <div class="menu-section">
             <label id="choose-practice-label">üß≠ Choose Your Practice:</label>
             <div class="practice-types" role="navigation" aria-label="Practice type menu">
                 <button id="vocabulary-btn" class="btn-primary" aria-label="Vocabulary" title="Vocabulary" role="button">üî† Vocabulary</button>
+                <button id="review-btn" class="btn-primary" aria-label="Review" title="Review Items" role="button">üîÅ Review</button> <!-- Review Button Added -->
                 <button id="grammar-btn" class="btn-primary" aria-label="Grammar" title="Grammar" role="button">üß© Grammar</button>
                 <button id="reading-btn" class="btn-primary" aria-label="Reading" title="Reading" role="button">üìö Reading</button>
                 <button id="speaking-btn" class="btn-primary" aria-label="Speaking" title="Speaking" role="button">üó£Ô∏è Speaking</button>
@@ -103,8 +112,17 @@
                 <button id="diary-btn" class="btn-secondary option-btn" aria-label="Diary" title="Diary" role="button">üìî Diary</button>
                 </div>
             </div>  
+            </div>
         </div>
         
+        <!-- Review Section -->
+        <div id="review-section" class="practice-options" style="display: none; text-align: center;">
+            <h2>Review Items</h2>
+            <div id="review-items-container" style="margin-bottom: 20px; min-height: 100px; border: 1px solid #ccc; padding: 10px;">
+                <!-- Review items will be populated here by JavaScript -->
+            </div>
+            <button id="back-to-main-from-review" class="btn-secondary">Back to Main Menu</button>
+        </div>
         <div id="result" class="result-area flex-center"></div>
     </div>
 
@@ -403,6 +421,7 @@
     <!-- interactive.js should be loaded after all feature scripts -->
     <script src="src/js/ui/interactive.js"></script>
     <script type="module" src="src/js/audio-feedback.js"></script>
+    <script type="module" src="src/js/review.js"></script>
 
 
 
--- a/src/js/user-progress.js
+++ b/src/js/user-progress.js
@@ -10,7 +10,8 @@
                  completedLessons: [],
                  achievements: [],
                  level: 1,
-                 firstTimeTodayForDay1: {}
+                 firstTimeTodayForDay1: {},
+                 learnedItems: [] // Ensure it's here too
              };
          }
          this.updateXPLevelDisplay(); // Call the update here
@@ -22,6 +23,9 @@
              // Ensure default values for new properties if loading old data
              if (this.data.xp === undefined) this.data.xp = 0;
              if (this.data.level === undefined) this.data.level = 1;
+             if (this.data.streak === undefined) this.data.streak = 0;
+             if (!this.data.learnedItems) {
+                this.data.learnedItems = [];
+            }
              if (!this.data.firstTimeTodayForDay1) { // Keep existing logic
                  this.data.firstTimeTodayForDay1 = {};
              }
@@ -75,7 +79,49 @@
         // Note: save() and updateXPLevelDisplay() are called by addXP()
         // If addXP didn't call them, they would be needed here:
         // this.save();
-        // this.updateXPLevelDisplay();
+        // this.updateXPLevelDisplay(); // updateXPLevelDisplay is called by addXP
+    },
+    addLearnedItem(itemId, itemType) {
+        const existingItemIndex = this.data.learnedItems.findIndex(item => item.id === itemId && item.type === itemType);
+        const nextReviewDate = new Date();
+        nextReviewDate.setDate(nextReviewDate.getDate() + 1); // Default next review in 1 day
+
+        if (existingItemIndex > -1) {
+            // Item already learned, update its last review and next review date (e.g., reset its schedule if re-learned)
+            this.data.learnedItems[existingItemIndex].lastReviewed = new Date().toISOString();
+            this.data.learnedItems[existingItemIndex].nextReview = nextReviewDate.toISOString();
+            this.data.learnedItems[existingItemIndex].consecutiveCorrect = 0; // Reset correct streak for this item
+            this.data.learnedItems[existingItemIndex].interval = 1; // Reset interval
+        } else {
+            this.data.learnedItems.push({
+                id: itemId,
+                type: itemType,
+                firstLearned: new Date().toISOString(),
+                lastReviewed: new Date().toISOString(),
+                nextReview: nextReviewDate.toISOString(),
+                consecutiveCorrect: 0, // How many times answered correctly in a row during review
+                interval: 1 // Current review interval in days
+            });
+        }
+        this.save();
+    },
+    updateReviewedItem(itemId, itemType, answeredCorrectly) {
+        const itemIndex = this.data.learnedItems.findIndex(item => item.id === itemId && item.type === itemType);
+        if (itemIndex === -1) return;
+
+        const item = this.data.learnedItems[itemIndex];
+        item.lastReviewed = new Date().toISOString();
+        const nextReviewDate = new Date();
+
+        if (answeredCorrectly) {
+            item.consecutiveCorrect = (item.consecutiveCorrect || 0) + 1;
+            item.interval = Math.min((item.interval || 1) * 2, 90); // Cap at ~3 months
+        } else {
+            item.consecutiveCorrect = 0;
+            item.interval = 1; // Reset interval if incorrect
+        }
+        nextReviewDate.setDate(nextReviewDate.getDate() + item.interval);
+        item.nextReview = nextReviewDate.toISOString();
+        this.data.learnedItems[itemIndex] = item;
+        this.save();
+    },
+    getItemsForReview() {
+        const today = new Date().toISOString().split('T')[0]; // Get YYYY-MM-DD part of today
+        return this.data.learnedItems.filter(item => {
+            if (!item.nextReview) return false; // Ensure item has a nextReview date
+            const nextReviewDay = item.nextReview.split('T')[0];
+            return nextReviewDay <= today;
+        });
     }
 };
 

```
--- /dev/null
+++ b/src/js/review.js
@@ -0,0 +1,83 @@
+import UserProgress from './user-progress.js';
+import AudioFeedback from './audio-feedback.js';
+// Potentially import functions to fetch actual item content based on ID and type
+// e.g., import { getVocabularyItemById } from './exercises/vocabulary.js';
+// e.g., import { getGrammarItemById } from './exercises/grammar.js';
+
+const reviewSection = document.getElementById('review-section');
+const reviewItemsContainer = document.getElementById('review-items-container');
+const reviewBtn = document.getElementById('review-btn');
+const backToMainFromReviewBtn = document.getElementById('back-to-main-from-review');
+const mainMenu = document.getElementById('main-menu'); // Assuming main menu wrapper
+
+let currentReviewItems = [];
+let currentItemIndex = 0;
+
+function displayCurrentReviewItem() {
+    if (currentItemIndex >= currentReviewItems.length) {
+        reviewItemsContainer.innerHTML = '<p>No more items to review for now!</p>';
+        UserProgress.updateXPLevelDisplay(); // Refresh stats after review session
+        return;
+    }
+    const item = currentReviewItems[currentItemIndex];
+    // This is a placeholder - you'll need to fetch the actual item content
+    // and display it in a way that allows user interaction (e.g., show word, ask for translation)
+    reviewItemsContainer.innerHTML = `
+        <div style="padding: 10px; border: 1px solid #eee; margin-top: 10px;">
+            <p>Reviewing: <strong>${item.type}</strong> - <em>${item.id}</em></p>
+            <p style="font-size: 1.2em; margin: 10px 0;"><em>(Display actual item content here, e.g., the word/phrase)</em></p>
+            <input type="text" id="review-answer-input" placeholder="Your answer" style="margin-bottom: 10px; padding: 8px; width: 80%;">
+            <button id="submit-review-answer" class="btn-primary">Submit</button>
+        </div>
+    `;
+    document.getElementById('submit-review-answer').addEventListener('click', () => {
+        const userAnswer = document.getElementById('review-answer-input').value;
+        // Placeholder for answer checking logic
+        // const isCorrect = checkReviewAnswer(item, userAnswer); /* Implement this function */
+        const isCorrect = Math.random() > 0.3; // Random for now, 70% chance of correct
+        
+        UserProgress.updateReviewedItem(item.id, item.type, isCorrect);
+        if (isCorrect) {
+            AudioFeedback.playSuccessSound();
+            showToast('Correct!'); // Assuming showToast is available
+        } else {
+            AudioFeedback.playErrorSound();
+            showToast('Incorrect. The answer was ... (show correct answer here)'); // Provide correct answer
+        }
+        currentItemIndex++;
+        displayCurrentReviewItem();
+    });
+}
+
+function startReviewSession() {
+    currentReviewItems = UserProgress.getItemsForReview();
+    currentItemIndex = 0;
+    if (currentReviewItems.length === 0) {
+        reviewItemsContainer.innerHTML = '<p>No items to review right now!</p>';
+    } else {
+        displayCurrentReviewItem();
+    }
+    // Hide other sections, show review section
+    if(mainMenu) mainMenu.style.display = 'none'; 
+    if(reviewSection) reviewSection.style.display = 'block';
+    AudioFeedback.playSelectSound();
+}
+
+if (reviewBtn) {
+    reviewBtn.addEventListener('click', startReviewSession);
+}
+
+if (backToMainFromReviewBtn) {
+    backToMainFromReviewBtn.addEventListener('click', () => {
+        if(reviewSection) reviewSection.style.display = 'none';
+        if(mainMenu) mainMenu.style.display = 'block'; // Show main menu
+        AudioFeedback.playClickSound();
+        UserProgress.updateXPLevelDisplay(); // Refresh stats
+    });
+}
+
+// Placeholder for showToast - if not globally available, it needs to be imported or defined
+function showToast(message) {
+    // This function should ideally interact with a proper toast notification element in index.html
+    console.log("Toast:", message); // Fallback
+}
+export { startReviewSession }; // Export if needed by other modules

```
