```diff
--- a/src/js/exercises/vocabulary.js
+++ b/src/js/exercises/vocabulary.js
@@ -233,17 +233,27 @@
     addEnterKeySupport('opposite-input', 'check-opposite');
     document.getElementById('check-opposite').addEventListener('click', () => {
         const userAnswer = document.getElementById('opposite-input').value.trim();
         const feedback = document.getElementById('opposite-feedback');
+        const isCorrect = userAnswer.toLowerCase() === opposite.toLowerCase();
+        
+        // Assume 'word' is the itemId and 'vocabulary' is the itemType
+        // This might need adjustment if 'word' is an object with an 'id' property
+        const itemId = word; // Or word.id if word is an object
+        const itemType = 'vocabulary';
+
+        UserProgress.recordAnswer(isCorrect, itemId, itemType);
+
         if (userAnswer.toLowerCase() === opposite.toLowerCase()) {
-            UserProgress.recordAnswer(true);
             AudioFeedback.playSuccessSound();
             feedback.innerHTML = `<span class="correct" aria-label="Correct">‚úÖüëè ${t.correct || 'Correct!'}</span>`;
             document.getElementById('opposite-answer').textContent = opposite;
+            // If this is the first time they got this specific word correct, or after N correct answers:
+            // UserProgress.addLearnedItem(itemId, itemType); 
+            // (Logic for 'first time' or 'mastered enough to add' would be more complex)
         } else {
-            UserProgress.recordAnswer(false);
             AudioFeedback.playErrorSound();
             feedback.innerHTML = `<span class="incorrect" aria-label="Incorrect">‚ùåü§î ${t.feedbackNotQuiteTryAgain || 'Try again!'}</span>`;
         }
     });
     document.getElementById('reveal-opposite').addEventListener('click', () => {
         document.getElementById('opposite-answer').textContent = opposite;
@@ -257,6 +267,10 @@
 // Match opposites exercise
 async function showMatchOpposites() {
     const language = document.getElementById('language').value;
+    // CONCEPTUAL: How item selection might change with weighted learning
+    // const allWordsRaw = await fetchAllVocabularyWordsForLanguage(language); // Fetch all possible words
+    // const selectionPool = UserProgress.getWeightedLearnableItems(allWordsRaw, 'vocabulary');
+    // const word = selectionPool[Math.floor(Math.random() * selectionPool.length)]; // Pick from weighted pool
     const days = getSelectedDays();
     const t = translations[language] || translations.COSYenglish;
     
--- a/src/js/user-progress.js
+++ b/src/js/user-progress.js
@@ -11,7 +11,12 @@
                  completedLessons: [],
                  achievements: [],
                  level: 1,
-                 firstTimeTodayForDay1: {}
+                 firstTimeTodayForDay1: {},
+                 learnedItems: [] 
              };
          }
          this.updateXPLevelDisplay(); // Call the update here
@@ -25,6 +30,11 @@
              if (this.data.streak === undefined) this.data.streak = 0;
              if (!this.data.learnedItems) {
                 this.data.learnedItems = [];
+            } else {
+                this.data.learnedItems = this.data.learnedItems.map(item => ({
+                    ...item,
+                    masteryLevel: item.masteryLevel === undefined ? 1 : item.masteryLevel,
+                    incorrectAttempts: item.incorrectAttempts === undefined ? 0 : item.incorrectAttempts
+                }));
             }
              if (!this.data.firstTimeTodayForDay1) { // Keep existing logic
                  this.data.firstTimeTodayForDay1 = {};
@@ -71,17 +81,29 @@
             this.save();
             this.updateXPLevelDisplay(); // Add this call
         }
-    },
-    recordAnswer(isCorrect) {
+    },    
+    recordAnswer(isCorrect, itemId, itemType) { // Added itemId, itemType
+        const itemIndex = itemId && itemType ? this.data.learnedItems.findIndex(item => item.id === itemId && item.type === itemType) : -1;
+
         if (isCorrect) {
             this.addXP(5); // Award 5 XP for a correct answer
+            if (itemIndex > -1) {
+                this.data.learnedItems[itemIndex].masteryLevel = Math.min(5, (this.data.learnedItems[itemIndex].masteryLevel || 1) + 1);
+                // Optional: Reset incorrect attempts on correct answer
+                // this.data.learnedItems[itemIndex].incorrectAttempts = 0; 
+            }
         } else {
             this.addXP(-2); // Example: Deduct 2 XP for an incorrect answer
             // xp minimum is handled by addXP now
+            if (itemIndex > -1) {
+                this.data.learnedItems[itemIndex].masteryLevel = Math.max(0, (this.data.learnedItems[itemIndex].masteryLevel || 1) - 1);
+                this.data.learnedItems[itemIndex].incorrectAttempts = (this.data.learnedItems[itemIndex].incorrectAttempts || 0) + 1;
+            }
         }
         // Note: save() and updateXPLevelDisplay() are called by addXP()
         // If addXP didn't call them, they would be needed here:
-        // this.save();
-        // this.updateXPLevelDisplay(); // updateXPLevelDisplay is called by addXP
+        this.save(); // Save specifically for learnedItems changes if not covered by addXP
+        this.updateXPLevelDisplay(); // Ensure display updates if addXP didn't run or for learnedItem changes
     },
     addLearnedItem(itemId, itemType) {
         const existingItemIndex = this.data.learnedItems.findIndex(item => item.id === itemId && item.type === itemType);
@@ -93,6 +115,8 @@
             this.data.learnedItems[existingItemIndex].lastReviewed = new Date().toISOString();
             this.data.learnedItems[existingItemIndex].nextReview = nextReviewDate.toISOString();
             this.data.learnedItems[existingItemIndex].consecutiveCorrect = 0; // Reset correct streak for this item
+            this.data.learnedItems[existingItemIndex].masteryLevel = 1; // Reset mastery
+            this.data.learnedItems[existingItemIndex].incorrectAttempts = 0; // Reset attempts
             this.data.learnedItems[existingItemIndex].interval = 1; // Reset interval
         } else {
             this.data.learnedItems.push({
@@ -102,7 +126,9 @@
                 lastReviewed: new Date().toISOString(),
                 nextReview: nextReviewDate.toISOString(),
                 consecutiveCorrect: 0, // How many times answered correctly in a row during review
-                interval: 1 // Current review interval in days
+                interval: 1, // Current review interval in days
+                masteryLevel: 1, // Initial mastery level
+                incorrectAttempts: 0 // Initial incorrect attempts
             });
         }
         this.save();
@@ -119,14 +145,19 @@
         if (answeredCorrectly) {
             item.consecutiveCorrect = (item.consecutiveCorrect || 0) + 1;
             item.interval = Math.min((item.interval || 1) * 2, 90); // Cap at ~3 months
+            item.masteryLevel = Math.min(5, (item.masteryLevel || 1) + 1); // Increase mastery
         } else {
             item.consecutiveCorrect = 0;
             item.interval = 1; // Reset interval if incorrect
+            item.masteryLevel = Math.max(0, (item.masteryLevel || 1) - 1); // Decrease mastery
+            item.incorrectAttempts = (item.incorrectAttempts || 0) + 1;
         }
         nextReviewDate.setDate(nextReviewDate.getDate() + item.interval);
         item.nextReview = nextReviewDate.toISOString();
         this.data.learnedItems[itemIndex] = item;
         this.save();
+        // XP for review could be handled here or in recordAnswer if reviews also give XP
+        this.updateXPLevelDisplay(); // Update display
     },
     getItemsForReview() {
         const today = new Date().toISOString().split('T')[0]; // Get YYYY-MM-DD part of today
@@ -135,6 +166,27 @@
             const nextReviewDay = item.nextReview.split('T')[0];
             return nextReviewDay <= today;
         });
+    },
+    getWeightedLearnableItems(allItemsRaw, itemType) {
+        // allItemsRaw is an array of basic items, e.g., {id: 'word1', ...}
+        const weightedItems = allItemsRaw.map(rawItem => {
+            const learnedItem = this.data.learnedItems.find(li => li.id === rawItem.id && li.type === itemType);
+            let weight = 10; // Default weight
+
+            if (learnedItem) {
+                // Decrease weight for higher mastery (less likely to be picked)
+                weight -= learnedItem.masteryLevel * 2; // e.g., mastery 5 -> weight 0
+                // Increase weight for more incorrect attempts (more likely to be picked)
+                weight += learnedItem.incorrectAttempts;
+            }
+            // Ensure weight is at least 1 (or some small positive number) to allow selection
+            return { ...rawItem, weight: Math.max(1, weight) };
+        });
+
+        // Simple weighted selection: create a list where items are repeated by their weight
+        const selectionPool = [];
+        weightedItems.forEach(item => {
+            for (let i = 0; i < item.weight; i++) {
+                selectionPool.push(item);
+            }
+        });
+        return selectionPool; // The exercise module would then pick randomly from this pool
     }
 };
 

```
